# Redo exercise 10.1 using the transformation method

import numpy as np
from matplotlib import pyplot as plt

def prob_dist(z,tau): # Defining probability distribution where z is a random number between 0 and 1 and tau is half life time
    mu = np.log(2)/tau
    return -(1/mu)*np.log(1-z) # This is the transformation method from the preceding section

# Above function generates times of decay corresponding to the thousand random numbers defined below)

tau = 3.053*60
NTl = np.random.rand(1000) # Generates a thousand random numbers
NTl_results = np.sort(prob_dist(NTl, tau)) # Sort the time array generated by the function from smallest to largest

time = np.arange(0,1000,1) # Time step so every "second" will check if that time is greater than or larger than the time array we generated above to know if the atom has decayed or not

Decay_list = []
for i in time:
    NotDecay = 0
    for j in NTl_results:
        if i < j:
            NotDecay += 1
    Decay_list.append(NotDecay)

# Above takes a point in time and compares it to every point in Ntl_results, if none of the time points are greater than the results points then that means that no atom has decayed so it will count 1000 points and add it to a list, reset, then cycle through again

plt.plot(time, Decay_list)
plt.xlabel('Time')
plt.ylabel('Atom Count')
plt.savefig('NotDecayed.png')
plt.show()
